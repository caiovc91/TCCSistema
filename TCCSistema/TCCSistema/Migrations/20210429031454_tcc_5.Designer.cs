// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TCCSistema.Data;

namespace TCCSistema.Migrations
{
    [DbContext(typeof(BaseContext))]
    [Migration("20210429031454_tcc_5")]
    partial class tcc_5
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.5")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("TCCSistema.Data.TCCSistemaUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("TCCSistema.Models.Camera", b =>
                {
                    b.Property<int>("id_camera")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("camera")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ipadress")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id_camera");

                    b.ToTable("Camera");
                });

            modelBuilder.Entity("TCCSistema.Models.ImageLog", b =>
                {
                    b.Property<int>("id_image")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("frame_number")
                        .HasColumnType("int");

                    b.Property<int>("id_camera")
                        .HasColumnType("int");

                    b.Property<int>("id_user")
                        .HasColumnType("int");

                    b.Property<string>("image_name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("image_string")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("position_h")
                        .HasColumnType("int");

                    b.Property<int>("position_v")
                        .HasColumnType("int");

                    b.Property<DateTime>("record")
                        .HasColumnType("datetime2");

                    b.HasKey("id_image");

                    b.HasIndex("id_camera");

                    b.HasIndex("id_user");

                    b.ToTable("ImageLog");
                });

            modelBuilder.Entity("TCCSistema.Models.Login", b =>
                {
                    b.Property<int>("id_login")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("id_user")
                        .HasColumnType("int");

                    b.Property<string>("login")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("password")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id_login");

                    b.HasIndex("id_user");

                    b.ToTable("Login");

                    b.HasData(
                        new
                        {
                            id_login = 1,
                            id_user = 1,
                            login = "admin",
                            password = "admin"
                        });
                });

            modelBuilder.Entity("TCCSistema.Models.OccurrenceLog", b =>
                {
                    b.Property<int>("id_occurrence")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ImageLogid_image")
                        .HasColumnType("int");

                    b.Property<int?>("Userid_user")
                        .HasColumnType("int");

                    b.Property<int>("id_camera")
                        .HasColumnType("int");

                    b.Property<int>("id_image")
                        .HasColumnType("int");

                    b.Property<int>("id_user")
                        .HasColumnType("int");

                    b.Property<DateTime>("occurdate")
                        .HasColumnType("datetime2");

                    b.HasKey("id_occurrence");

                    b.HasIndex("ImageLogid_image");

                    b.HasIndex("Userid_user");

                    b.HasIndex("id_camera");

                    b.ToTable("OccurrenceLog");
                });

            modelBuilder.Entity("TCCSistema.Models.TargetUser", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("User1id_user")
                        .HasColumnType("int");

                    b.Property<int?>("User2id_user")
                        .HasColumnType("int");

                    b.Property<int>("id_user1")
                        .HasColumnType("int");

                    b.Property<int>("id_user2")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("User1id_user");

                    b.HasIndex("User2id_user");

                    b.ToTable("TargetUser");
                });

            modelBuilder.Entity("TCCSistema.Models.User", b =>
                {
                    b.Property<int>("id_user")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Loginid_login")
                        .HasColumnType("int");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("id_user_type")
                        .HasColumnType("int");

                    b.Property<string>("info")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("isPatient")
                        .HasColumnType("bit");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("role")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id_user");

                    b.HasIndex("Loginid_login");

                    b.HasIndex("id_user_type");

                    b.ToTable("User");

                    b.HasData(
                        new
                        {
                            id_user = 1,
                            email = "admin@admin.com",
                            id_user_type = 1,
                            info = "System Administrator",
                            isPatient = false,
                            name = "Admin",
                            phone = "99999999"
                        });
                });

            modelBuilder.Entity("TCCSistema.Models.UserType", b =>
                {
                    b.Property<int>("id_user_type")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id_user_type");

                    b.ToTable("UserType");

                    b.HasData(
                        new
                        {
                            id_user_type = 1,
                            type = "Administrator"
                        },
                        new
                        {
                            id_user_type = 2,
                            type = "Observer"
                        },
                        new
                        {
                            id_user_type = 3,
                            type = "Regular"
                        },
                        new
                        {
                            id_user_type = 4,
                            type = "Patient"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("TCCSistema.Data.TCCSistemaUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("TCCSistema.Data.TCCSistemaUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TCCSistema.Data.TCCSistemaUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("TCCSistema.Data.TCCSistemaUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TCCSistema.Models.ImageLog", b =>
                {
                    b.HasOne("TCCSistema.Models.Camera", "Camera")
                        .WithMany()
                        .HasForeignKey("id_camera")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TCCSistema.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("id_user")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Camera");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TCCSistema.Models.Login", b =>
                {
                    b.HasOne("TCCSistema.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("id_user")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("TCCSistema.Models.OccurrenceLog", b =>
                {
                    b.HasOne("TCCSistema.Models.ImageLog", "ImageLog")
                        .WithMany()
                        .HasForeignKey("ImageLogid_image");

                    b.HasOne("TCCSistema.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("Userid_user");

                    b.HasOne("TCCSistema.Models.Camera", "Camera")
                        .WithMany()
                        .HasForeignKey("id_camera")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Camera");

                    b.Navigation("ImageLog");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TCCSistema.Models.TargetUser", b =>
                {
                    b.HasOne("TCCSistema.Models.User", "User1")
                        .WithMany()
                        .HasForeignKey("User1id_user");

                    b.HasOne("TCCSistema.Models.User", "User2")
                        .WithMany()
                        .HasForeignKey("User2id_user");

                    b.Navigation("User1");

                    b.Navigation("User2");
                });

            modelBuilder.Entity("TCCSistema.Models.User", b =>
                {
                    b.HasOne("TCCSistema.Models.Login", null)
                        .WithMany("Users")
                        .HasForeignKey("Loginid_login");

                    b.HasOne("TCCSistema.Models.UserType", "UserType")
                        .WithMany()
                        .HasForeignKey("id_user_type")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserType");
                });

            modelBuilder.Entity("TCCSistema.Models.Login", b =>
                {
                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
